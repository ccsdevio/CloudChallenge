name: 'Terraform'

# This is taken directly from Hashicorp tutorial at https://learn.hashicorp.com/tutorials/terraform/github-actions. 
# This runs a plan on any pull request, and runs apply on any push to main. 
# For pull requests, it also displays results of the setup steps and the plan output. 
# It displays these directly in the PR.
# This workflow runs upon any pushes to folders/files that affect infra: 
# terraform, scripts, and index.html. It runs on all pull requests to highlight
# any infra is added/changed/destroyed.

on:
  push:
    paths:
    - 'terraform/**'
    - 's3/**'
      branches:
        - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}          

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

# Runs terraform plan for any pull request. Continues on error so that output 
# is displayed (see 'uses', next step)
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

# Displays output of terraform plan in pull request
    -uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with: 
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = 
          `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
    if: steps.plan.outcome == 'failure'
    run: exit 1

    - name: Terraform Apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    run: terraform apply -auto-approve